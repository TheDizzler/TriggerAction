#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace TriggerAction {
    using namespace System;
    ref class root;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"root"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class root : public ::System::Data::DataSet {
        public : ref class spriteDataTable;
        public : ref class hitboxDataTable;
        public : ref class weaponMenuIconDataTable;
        public : ref class spritesheetDataTable;
        public : ref class animationDataTable;
        public : ref class spriteRow;
        public : ref class hitboxRow;
        public : ref class weaponMenuIconRow;
        public : ref class spritesheetRow;
        public : ref class animationRow;
        public : ref class spriteRowChangeEvent;
        public : ref class hitboxRowChangeEvent;
        public : ref class weaponMenuIconRowChangeEvent;
        public : ref class spritesheetRowChangeEvent;
        public : ref class animationRowChangeEvent;
        
        private: TriggerAction::root::spriteDataTable^  tablesprite;
        
        private: TriggerAction::root::hitboxDataTable^  tablehitbox;
        
        private: TriggerAction::root::weaponMenuIconDataTable^  tableweaponMenuIcon;
        
        private: TriggerAction::root::spritesheetDataTable^  tablespritesheet;
        
        private: TriggerAction::root::animationDataTable^  tableanimation;
        
        private: ::System::Data::DataRelation^  relationanimation_sprite;
        
        private: ::System::Data::DataRelation^  relationspritesheet_sprite;
        
        private: ::System::Data::DataRelation^  relationspritesheet_animation;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void spriteRowChangeEventHandler(::System::Object^  sender, TriggerAction::root::spriteRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void hitboxRowChangeEventHandler(::System::Object^  sender, TriggerAction::root::hitboxRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void weaponMenuIconRowChangeEventHandler(::System::Object^  sender, TriggerAction::root::weaponMenuIconRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void spritesheetRowChangeEventHandler(::System::Object^  sender, TriggerAction::root::spritesheetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void animationRowChangeEventHandler(::System::Object^  sender, TriggerAction::root::animationRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        root();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        root(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property TriggerAction::root::spriteDataTable^  sprite {
            TriggerAction::root::spriteDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property TriggerAction::root::hitboxDataTable^  hitbox {
            TriggerAction::root::hitboxDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property TriggerAction::root::weaponMenuIconDataTable^  weaponMenuIcon {
            TriggerAction::root::weaponMenuIconDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property TriggerAction::root::spritesheetDataTable^  spritesheet {
            TriggerAction::root::spritesheetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property TriggerAction::root::animationDataTable^  animation {
            TriggerAction::root::animationDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializesprite();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializehitbox();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeweaponMenuIcon();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializespritesheet();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeanimation();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class spriteDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnx;
            
            private: ::System::Data::DataColumn^  columny;
            
            private: ::System::Data::DataColumn^  columnwidth;
            
            private: ::System::Data::DataColumn^  columnheight;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnframeTime;
            
            private: ::System::Data::DataColumn^  columnanimation_Id;
            
            private: ::System::Data::DataColumn^  columnspritesheet_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spriteRowChangeEventHandler^  spriteRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spriteRowChangeEventHandler^  spriteRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spriteRowChangeEventHandler^  spriteRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spriteRowChangeEventHandler^  spriteRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spriteDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spriteDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spriteDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  widthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  heightColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  frameTimeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  animation_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  spritesheet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spriteRow^  default [::System::Int32 ] {
                TriggerAction::root::spriteRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddspriteRow(TriggerAction::root::spriteRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::spriteRow^  AddspriteRow(
                        System::String^  x, 
                        System::String^  y, 
                        System::String^  width, 
                        System::String^  height, 
                        System::String^  name, 
                        System::String^  frameTime, 
                        TriggerAction::root::animationRow^  parentanimationRowByanimation_sprite, 
                        TriggerAction::root::spritesheetRow^  parentspritesheetRowByspritesheet_sprite);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::spriteRow^  NewspriteRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovespriteRow(TriggerAction::root::spriteRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class hitboxDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnx;
            
            private: ::System::Data::DataColumn^  columny;
            
            private: ::System::Data::DataColumn^  columnwidth;
            
            private: ::System::Data::DataColumn^  columnheight;
            
            private: ::System::Data::DataColumn^  columnz;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::hitboxRowChangeEventHandler^  hitboxRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::hitboxRowChangeEventHandler^  hitboxRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::hitboxRowChangeEventHandler^  hitboxRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::hitboxRowChangeEventHandler^  hitboxRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            hitboxDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            hitboxDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            hitboxDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  xColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  yColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  widthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  heightColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  zColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::hitboxRow^  default [::System::Int32 ] {
                TriggerAction::root::hitboxRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddhitboxRow(TriggerAction::root::hitboxRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::hitboxRow^  AddhitboxRow(System::String^  x, System::String^  y, System::String^  width, 
                        System::String^  height, System::String^  z);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::hitboxRow^  NewhitboxRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovehitboxRow(TriggerAction::root::hitboxRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class weaponMenuIconDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::weaponMenuIconRowChangeEventHandler^  weaponMenuIconRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::weaponMenuIconRowChangeEventHandler^  weaponMenuIconRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::weaponMenuIconRowChangeEventHandler^  weaponMenuIconRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::weaponMenuIconRowChangeEventHandler^  weaponMenuIconRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            weaponMenuIconDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            weaponMenuIconDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            weaponMenuIconDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::weaponMenuIconRow^  default [::System::Int32 ] {
                TriggerAction::root::weaponMenuIconRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddweaponMenuIconRow(TriggerAction::root::weaponMenuIconRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::weaponMenuIconRow^  AddweaponMenuIconRow(System::String^  name);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::weaponMenuIconRow^  NewweaponMenuIconRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveweaponMenuIconRow(TriggerAction::root::weaponMenuIconRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class spritesheetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnspritesheet_Id;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnfile;
            
            private: ::System::Data::DataColumn^  columnset;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spritesheetRowChangeEventHandler^  spritesheetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spritesheetRowChangeEventHandler^  spritesheetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spritesheetRowChangeEventHandler^  spritesheetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::spritesheetRowChangeEventHandler^  spritesheetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spritesheetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spritesheetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spritesheetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  spritesheet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  fileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  setColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spritesheetRow^  default [::System::Int32 ] {
                TriggerAction::root::spritesheetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddspritesheetRow(TriggerAction::root::spritesheetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::spritesheetRow^  AddspritesheetRow(System::String^  name, System::String^  file, System::String^  set);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::spritesheetRow^  NewspritesheetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovespritesheetRow(TriggerAction::root::spritesheetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class animationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnanimation_Id;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnframeTime;
            
            private: ::System::Data::DataColumn^  columnspritesheet_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::animationRowChangeEventHandler^  animationRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::animationRowChangeEventHandler^  animationRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::animationRowChangeEventHandler^  animationRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event TriggerAction::root::animationRowChangeEventHandler^  animationRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            animationDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            animationDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            animationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  animation_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  frameTimeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  spritesheet_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::animationRow^  default [::System::Int32 ] {
                TriggerAction::root::animationRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddanimationRow(TriggerAction::root::animationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::animationRow^  AddanimationRow(System::String^  name, System::String^  frameTime, TriggerAction::root::spritesheetRow^  parentspritesheetRowByspritesheet_animation);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerAction::root::animationRow^  NewanimationRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveanimationRow(TriggerAction::root::animationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class spriteRow : public ::System::Data::DataRow {
            
            private: TriggerAction::root::spriteDataTable^  tablesprite;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spriteRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  x {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  y {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  width {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  height {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  frameTime {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 animation_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 spritesheet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::animationRow^  animationRow {
                TriggerAction::root::animationRow^  get();
                System::Void set(TriggerAction::root::animationRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spritesheetRow^  spritesheetRow {
                TriggerAction::root::spritesheetRow^  get();
                System::Void set(TriggerAction::root::spritesheetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IswidthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetwidthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsheightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetheightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsframeTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetframeTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isanimation_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setanimation_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isspritesheet_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setspritesheet_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class hitboxRow : public ::System::Data::DataRow {
            
            private: TriggerAction::root::hitboxDataTable^  tablehitbox;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            hitboxRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  x {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  y {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  width {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  height {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  z {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IswidthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetwidthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsheightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetheightNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IszNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetzNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class weaponMenuIconRow : public ::System::Data::DataRow {
            
            private: TriggerAction::root::weaponMenuIconDataTable^  tableweaponMenuIcon;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            weaponMenuIconRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class spritesheetRow : public ::System::Data::DataRow {
            
            private: TriggerAction::root::spritesheetDataTable^  tablespritesheet;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spritesheetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 spritesheet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  file {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  set {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsfileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetfileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< TriggerAction::root::spriteRow^  >^  GetspriteRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< TriggerAction::root::animationRow^  >^  GetanimationRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class animationRow : public ::System::Data::DataRow {
            
            private: TriggerAction::root::animationDataTable^  tableanimation;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            animationRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 animation_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  frameTime {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 spritesheet_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spritesheetRow^  spritesheetRow {
                TriggerAction::root::spritesheetRow^  get();
                System::Void set(TriggerAction::root::spritesheetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsframeTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetframeTimeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isspritesheet_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setspritesheet_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< TriggerAction::root::spriteRow^  >^  GetspriteRows();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class spriteRowChangeEvent : public ::System::EventArgs {
            
            private: TriggerAction::root::spriteRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spriteRowChangeEvent(TriggerAction::root::spriteRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spriteRow^  Row {
                TriggerAction::root::spriteRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class hitboxRowChangeEvent : public ::System::EventArgs {
            
            private: TriggerAction::root::hitboxRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            hitboxRowChangeEvent(TriggerAction::root::hitboxRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::hitboxRow^  Row {
                TriggerAction::root::hitboxRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class weaponMenuIconRowChangeEvent : public ::System::EventArgs {
            
            private: TriggerAction::root::weaponMenuIconRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            weaponMenuIconRowChangeEvent(TriggerAction::root::weaponMenuIconRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::weaponMenuIconRow^  Row {
                TriggerAction::root::weaponMenuIconRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class spritesheetRowChangeEvent : public ::System::EventArgs {
            
            private: TriggerAction::root::spritesheetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            spritesheetRowChangeEvent(TriggerAction::root::spritesheetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::spritesheetRow^  Row {
                TriggerAction::root::spritesheetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class animationRowChangeEvent : public ::System::EventArgs {
            
            private: TriggerAction::root::animationRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            animationRowChangeEvent(TriggerAction::root::animationRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property TriggerAction::root::animationRow^  Row {
                TriggerAction::root::animationRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace TriggerAction {
    
    
    inline root::root() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &TriggerAction::root::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline root::root(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &TriggerAction::root::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"sprite"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::spriteDataTable(ds->Tables[L"sprite"])));
            }
            if (ds->Tables[L"hitbox"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::hitboxDataTable(ds->Tables[L"hitbox"])));
            }
            if (ds->Tables[L"weaponMenuIcon"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::weaponMenuIconDataTable(ds->Tables[L"weaponMenuIcon"])));
            }
            if (ds->Tables[L"spritesheet"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::spritesheetDataTable(ds->Tables[L"spritesheet"])));
            }
            if (ds->Tables[L"animation"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::animationDataTable(ds->Tables[L"animation"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &TriggerAction::root::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline TriggerAction::root::spriteDataTable^  root::sprite::get() {
        return this->tablesprite;
    }
    
    inline TriggerAction::root::hitboxDataTable^  root::hitbox::get() {
        return this->tablehitbox;
    }
    
    inline TriggerAction::root::weaponMenuIconDataTable^  root::weaponMenuIcon::get() {
        return this->tableweaponMenuIcon;
    }
    
    inline TriggerAction::root::spritesheetDataTable^  root::spritesheet::get() {
        return this->tablespritesheet;
    }
    
    inline TriggerAction::root::animationDataTable^  root::animation::get() {
        return this->tableanimation;
    }
    
    inline ::System::Data::SchemaSerializationMode root::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void root::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  root::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  root::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void root::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  root::Clone() {
        TriggerAction::root^  cln = (cli::safe_cast<TriggerAction::root^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean root::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean root::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void root::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"sprite"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::spriteDataTable(ds->Tables[L"sprite"])));
            }
            if (ds->Tables[L"hitbox"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::hitboxDataTable(ds->Tables[L"hitbox"])));
            }
            if (ds->Tables[L"weaponMenuIcon"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::weaponMenuIconDataTable(ds->Tables[L"weaponMenuIcon"])));
            }
            if (ds->Tables[L"spritesheet"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::spritesheetDataTable(ds->Tables[L"spritesheet"])));
            }
            if (ds->Tables[L"animation"] != nullptr) {
                __super::Tables->Add((gcnew TriggerAction::root::animationDataTable(ds->Tables[L"animation"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  root::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void root::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void root::InitVars(::System::Boolean initTable) {
        this->tablesprite = (cli::safe_cast<TriggerAction::root::spriteDataTable^  >(__super::Tables[L"sprite"]));
        if (initTable == true) {
            if (this->tablesprite != nullptr) {
                this->tablesprite->InitVars();
            }
        }
        this->tablehitbox = (cli::safe_cast<TriggerAction::root::hitboxDataTable^  >(__super::Tables[L"hitbox"]));
        if (initTable == true) {
            if (this->tablehitbox != nullptr) {
                this->tablehitbox->InitVars();
            }
        }
        this->tableweaponMenuIcon = (cli::safe_cast<TriggerAction::root::weaponMenuIconDataTable^  >(__super::Tables[L"weaponMenuIcon"]));
        if (initTable == true) {
            if (this->tableweaponMenuIcon != nullptr) {
                this->tableweaponMenuIcon->InitVars();
            }
        }
        this->tablespritesheet = (cli::safe_cast<TriggerAction::root::spritesheetDataTable^  >(__super::Tables[L"spritesheet"]));
        if (initTable == true) {
            if (this->tablespritesheet != nullptr) {
                this->tablespritesheet->InitVars();
            }
        }
        this->tableanimation = (cli::safe_cast<TriggerAction::root::animationDataTable^  >(__super::Tables[L"animation"]));
        if (initTable == true) {
            if (this->tableanimation != nullptr) {
                this->tableanimation->InitVars();
            }
        }
        this->relationanimation_sprite = this->Relations[L"animation_sprite"];
        this->relationspritesheet_sprite = this->Relations[L"spritesheet_sprite"];
        this->relationspritesheet_animation = this->Relations[L"spritesheet_animation"];
    }
    
    inline ::System::Void root::InitClass() {
        this->DataSetName = L"root";
        this->Prefix = L"";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablesprite = (gcnew TriggerAction::root::spriteDataTable());
        __super::Tables->Add(this->tablesprite);
        this->tablehitbox = (gcnew TriggerAction::root::hitboxDataTable());
        __super::Tables->Add(this->tablehitbox);
        this->tableweaponMenuIcon = (gcnew TriggerAction::root::weaponMenuIconDataTable());
        __super::Tables->Add(this->tableweaponMenuIcon);
        this->tablespritesheet = (gcnew TriggerAction::root::spritesheetDataTable());
        __super::Tables->Add(this->tablespritesheet);
        this->tableanimation = (gcnew TriggerAction::root::animationDataTable());
        __super::Tables->Add(this->tableanimation);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"animation_sprite", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimation->animation_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesprite->animation_IdColumn}));
        this->tablesprite->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spritesheet_sprite", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespritesheet->spritesheet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesprite->spritesheet_IdColumn}));
        this->tablesprite->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"spritesheet_animation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespritesheet->spritesheet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimation->spritesheet_IdColumn}));
        this->tableanimation->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationanimation_sprite = (gcnew ::System::Data::DataRelation(L"animation_sprite", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimation->animation_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesprite->animation_IdColumn}, false));
        this->relationanimation_sprite->Nested = true;
        this->Relations->Add(this->relationanimation_sprite);
        this->relationspritesheet_sprite = (gcnew ::System::Data::DataRelation(L"spritesheet_sprite", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespritesheet->spritesheet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesprite->spritesheet_IdColumn}, false));
        this->relationspritesheet_sprite->Nested = true;
        this->Relations->Add(this->relationspritesheet_sprite);
        this->relationspritesheet_animation = (gcnew ::System::Data::DataRelation(L"spritesheet_animation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespritesheet->spritesheet_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanimation->spritesheet_IdColumn}, false));
        this->relationspritesheet_animation->Nested = true;
        this->Relations->Add(this->relationspritesheet_animation);
    }
    
    inline ::System::Boolean root::ShouldSerializesprite() {
        return false;
    }
    
    inline ::System::Boolean root::ShouldSerializehitbox() {
        return false;
    }
    
    inline ::System::Boolean root::ShouldSerializeweaponMenuIcon() {
        return false;
    }
    
    inline ::System::Boolean root::ShouldSerializespritesheet() {
        return false;
    }
    
    inline ::System::Boolean root::ShouldSerializeanimation() {
        return false;
    }
    
    inline ::System::Void root::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::spriteDataTable::spriteDataTable() {
        this->TableName = L"sprite";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline root::spriteDataTable::spriteDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline root::spriteDataTable::spriteDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::xColumn::get() {
        return this->columnx;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::yColumn::get() {
        return this->columny;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::widthColumn::get() {
        return this->columnwidth;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::heightColumn::get() {
        return this->columnheight;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::frameTimeColumn::get() {
        return this->columnframeTime;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::animation_IdColumn::get() {
        return this->columnanimation_Id;
    }
    
    inline ::System::Data::DataColumn^  root::spriteDataTable::spritesheet_IdColumn::get() {
        return this->columnspritesheet_Id;
    }
    
    inline ::System::Int32 root::spriteDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline TriggerAction::root::spriteRow^  root::spriteDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<TriggerAction::root::spriteRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void root::spriteDataTable::AddspriteRow(TriggerAction::root::spriteRow^  row) {
        this->Rows->Add(row);
    }
    
    inline TriggerAction::root::spriteRow^  root::spriteDataTable::AddspriteRow(
                System::String^  x, 
                System::String^  y, 
                System::String^  width, 
                System::String^  height, 
                System::String^  name, 
                System::String^  frameTime, 
                TriggerAction::root::animationRow^  parentanimationRowByanimation_sprite, 
                TriggerAction::root::spritesheetRow^  parentspritesheetRowByspritesheet_sprite) {
        TriggerAction::root::spriteRow^  rowspriteRow = (cli::safe_cast<TriggerAction::root::spriteRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {x, y, width, height, 
            name, frameTime, nullptr, nullptr};
        if (parentanimationRowByanimation_sprite != nullptr) {
            columnValuesArray[6] = parentanimationRowByanimation_sprite[0];
        }
        if (parentspritesheetRowByspritesheet_sprite != nullptr) {
            columnValuesArray[7] = parentspritesheetRowByspritesheet_sprite[0];
        }
        rowspriteRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowspriteRow);
        return rowspriteRow;
    }
    
    inline ::System::Collections::IEnumerator^  root::spriteDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  root::spriteDataTable::Clone() {
        TriggerAction::root::spriteDataTable^  cln = (cli::safe_cast<TriggerAction::root::spriteDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  root::spriteDataTable::CreateInstance() {
        return (gcnew TriggerAction::root::spriteDataTable());
    }
    
    inline ::System::Void root::spriteDataTable::InitVars() {
        this->columnx = __super::Columns[L"x"];
        this->columny = __super::Columns[L"y"];
        this->columnwidth = __super::Columns[L"width"];
        this->columnheight = __super::Columns[L"height"];
        this->columnname = __super::Columns[L"name"];
        this->columnframeTime = __super::Columns[L"frameTime"];
        this->columnanimation_Id = __super::Columns[L"animation_Id"];
        this->columnspritesheet_Id = __super::Columns[L"spritesheet_Id"];
    }
    
    inline ::System::Void root::spriteDataTable::InitClass() {
        this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnx);
        this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columny);
        this->columnwidth = (gcnew ::System::Data::DataColumn(L"width", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwidth);
        this->columnheight = (gcnew ::System::Data::DataColumn(L"height", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnheight);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnframeTime = (gcnew ::System::Data::DataColumn(L"frameTime", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnframeTime);
        this->columnanimation_Id = (gcnew ::System::Data::DataColumn(L"animation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnanimation_Id);
        this->columnspritesheet_Id = (gcnew ::System::Data::DataColumn(L"spritesheet_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnspritesheet_Id);
        this->columnx->Namespace = L"";
        this->columny->Namespace = L"";
        this->columnwidth->Namespace = L"";
        this->columnheight->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnframeTime->Namespace = L"";
    }
    
    inline TriggerAction::root::spriteRow^  root::spriteDataTable::NewspriteRow() {
        return (cli::safe_cast<TriggerAction::root::spriteRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  root::spriteDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew TriggerAction::root::spriteRow(builder));
    }
    
    inline ::System::Type^  root::spriteDataTable::GetRowType() {
        return TriggerAction::root::spriteRow::typeid;
    }
    
    inline ::System::Void root::spriteDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->spriteRowChanged(this, (gcnew TriggerAction::root::spriteRowChangeEvent((cli::safe_cast<TriggerAction::root::spriteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spriteDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->spriteRowChanging(this, (gcnew TriggerAction::root::spriteRowChangeEvent((cli::safe_cast<TriggerAction::root::spriteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spriteDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->spriteRowDeleted(this, (gcnew TriggerAction::root::spriteRowChangeEvent((cli::safe_cast<TriggerAction::root::spriteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spriteDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->spriteRowDeleting(this, (gcnew TriggerAction::root::spriteRowChangeEvent((cli::safe_cast<TriggerAction::root::spriteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spriteDataTable::RemovespriteRow(TriggerAction::root::spriteRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::spriteDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"spriteDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::hitboxDataTable::hitboxDataTable() {
        this->TableName = L"hitbox";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline root::hitboxDataTable::hitboxDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline root::hitboxDataTable::hitboxDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  root::hitboxDataTable::xColumn::get() {
        return this->columnx;
    }
    
    inline ::System::Data::DataColumn^  root::hitboxDataTable::yColumn::get() {
        return this->columny;
    }
    
    inline ::System::Data::DataColumn^  root::hitboxDataTable::widthColumn::get() {
        return this->columnwidth;
    }
    
    inline ::System::Data::DataColumn^  root::hitboxDataTable::heightColumn::get() {
        return this->columnheight;
    }
    
    inline ::System::Data::DataColumn^  root::hitboxDataTable::zColumn::get() {
        return this->columnz;
    }
    
    inline ::System::Int32 root::hitboxDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline TriggerAction::root::hitboxRow^  root::hitboxDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<TriggerAction::root::hitboxRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void root::hitboxDataTable::AddhitboxRow(TriggerAction::root::hitboxRow^  row) {
        this->Rows->Add(row);
    }
    
    inline TriggerAction::root::hitboxRow^  root::hitboxDataTable::AddhitboxRow(System::String^  x, System::String^  y, System::String^  width, 
                System::String^  height, System::String^  z) {
        TriggerAction::root::hitboxRow^  rowhitboxRow = (cli::safe_cast<TriggerAction::root::hitboxRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {x, y, width, height, 
            z};
        rowhitboxRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowhitboxRow);
        return rowhitboxRow;
    }
    
    inline ::System::Collections::IEnumerator^  root::hitboxDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  root::hitboxDataTable::Clone() {
        TriggerAction::root::hitboxDataTable^  cln = (cli::safe_cast<TriggerAction::root::hitboxDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  root::hitboxDataTable::CreateInstance() {
        return (gcnew TriggerAction::root::hitboxDataTable());
    }
    
    inline ::System::Void root::hitboxDataTable::InitVars() {
        this->columnx = __super::Columns[L"x"];
        this->columny = __super::Columns[L"y"];
        this->columnwidth = __super::Columns[L"width"];
        this->columnheight = __super::Columns[L"height"];
        this->columnz = __super::Columns[L"z"];
    }
    
    inline ::System::Void root::hitboxDataTable::InitClass() {
        this->columnx = (gcnew ::System::Data::DataColumn(L"x", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnx);
        this->columny = (gcnew ::System::Data::DataColumn(L"y", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columny);
        this->columnwidth = (gcnew ::System::Data::DataColumn(L"width", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwidth);
        this->columnheight = (gcnew ::System::Data::DataColumn(L"height", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnheight);
        this->columnz = (gcnew ::System::Data::DataColumn(L"z", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnz);
        this->columnx->Namespace = L"";
        this->columny->Namespace = L"";
        this->columnwidth->Namespace = L"";
        this->columnheight->Namespace = L"";
        this->columnz->Namespace = L"";
    }
    
    inline TriggerAction::root::hitboxRow^  root::hitboxDataTable::NewhitboxRow() {
        return (cli::safe_cast<TriggerAction::root::hitboxRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  root::hitboxDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew TriggerAction::root::hitboxRow(builder));
    }
    
    inline ::System::Type^  root::hitboxDataTable::GetRowType() {
        return TriggerAction::root::hitboxRow::typeid;
    }
    
    inline ::System::Void root::hitboxDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->hitboxRowChanged(this, (gcnew TriggerAction::root::hitboxRowChangeEvent((cli::safe_cast<TriggerAction::root::hitboxRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::hitboxDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->hitboxRowChanging(this, (gcnew TriggerAction::root::hitboxRowChangeEvent((cli::safe_cast<TriggerAction::root::hitboxRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::hitboxDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->hitboxRowDeleted(this, (gcnew TriggerAction::root::hitboxRowChangeEvent((cli::safe_cast<TriggerAction::root::hitboxRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::hitboxDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->hitboxRowDeleting(this, (gcnew TriggerAction::root::hitboxRowChangeEvent((cli::safe_cast<TriggerAction::root::hitboxRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::hitboxDataTable::RemovehitboxRow(TriggerAction::root::hitboxRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::hitboxDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"hitboxDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::weaponMenuIconDataTable::weaponMenuIconDataTable() {
        this->TableName = L"weaponMenuIcon";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline root::weaponMenuIconDataTable::weaponMenuIconDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline root::weaponMenuIconDataTable::weaponMenuIconDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  root::weaponMenuIconDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Int32 root::weaponMenuIconDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline TriggerAction::root::weaponMenuIconRow^  root::weaponMenuIconDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::AddweaponMenuIconRow(TriggerAction::root::weaponMenuIconRow^  row) {
        this->Rows->Add(row);
    }
    
    inline TriggerAction::root::weaponMenuIconRow^  root::weaponMenuIconDataTable::AddweaponMenuIconRow(System::String^  name) {
        TriggerAction::root::weaponMenuIconRow^  rowweaponMenuIconRow = (cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {name};
        rowweaponMenuIconRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowweaponMenuIconRow);
        return rowweaponMenuIconRow;
    }
    
    inline ::System::Collections::IEnumerator^  root::weaponMenuIconDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  root::weaponMenuIconDataTable::Clone() {
        TriggerAction::root::weaponMenuIconDataTable^  cln = (cli::safe_cast<TriggerAction::root::weaponMenuIconDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  root::weaponMenuIconDataTable::CreateInstance() {
        return (gcnew TriggerAction::root::weaponMenuIconDataTable());
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnname->Namespace = L"";
    }
    
    inline TriggerAction::root::weaponMenuIconRow^  root::weaponMenuIconDataTable::NewweaponMenuIconRow() {
        return (cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  root::weaponMenuIconDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew TriggerAction::root::weaponMenuIconRow(builder));
    }
    
    inline ::System::Type^  root::weaponMenuIconDataTable::GetRowType() {
        return TriggerAction::root::weaponMenuIconRow::typeid;
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->weaponMenuIconRowChanged(this, (gcnew TriggerAction::root::weaponMenuIconRowChangeEvent((cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->weaponMenuIconRowChanging(this, (gcnew TriggerAction::root::weaponMenuIconRowChangeEvent((cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->weaponMenuIconRowDeleted(this, (gcnew TriggerAction::root::weaponMenuIconRowChangeEvent((cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->weaponMenuIconRowDeleting(this, (gcnew TriggerAction::root::weaponMenuIconRowChangeEvent((cli::safe_cast<TriggerAction::root::weaponMenuIconRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::weaponMenuIconDataTable::RemoveweaponMenuIconRow(TriggerAction::root::weaponMenuIconRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::weaponMenuIconDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"weaponMenuIconDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::spritesheetDataTable::spritesheetDataTable() {
        this->TableName = L"spritesheet";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline root::spritesheetDataTable::spritesheetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline root::spritesheetDataTable::spritesheetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  root::spritesheetDataTable::spritesheet_IdColumn::get() {
        return this->columnspritesheet_Id;
    }
    
    inline ::System::Data::DataColumn^  root::spritesheetDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  root::spritesheetDataTable::fileColumn::get() {
        return this->columnfile;
    }
    
    inline ::System::Data::DataColumn^  root::spritesheetDataTable::setColumn::get() {
        return this->columnset;
    }
    
    inline ::System::Int32 root::spritesheetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline TriggerAction::root::spritesheetRow^  root::spritesheetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<TriggerAction::root::spritesheetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void root::spritesheetDataTable::AddspritesheetRow(TriggerAction::root::spritesheetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline TriggerAction::root::spritesheetRow^  root::spritesheetDataTable::AddspritesheetRow(System::String^  name, System::String^  file, 
                System::String^  set) {
        TriggerAction::root::spritesheetRow^  rowspritesheetRow = (cli::safe_cast<TriggerAction::root::spritesheetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {nullptr, name, file, 
            set};
        rowspritesheetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowspritesheetRow);
        return rowspritesheetRow;
    }
    
    inline ::System::Collections::IEnumerator^  root::spritesheetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  root::spritesheetDataTable::Clone() {
        TriggerAction::root::spritesheetDataTable^  cln = (cli::safe_cast<TriggerAction::root::spritesheetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  root::spritesheetDataTable::CreateInstance() {
        return (gcnew TriggerAction::root::spritesheetDataTable());
    }
    
    inline ::System::Void root::spritesheetDataTable::InitVars() {
        this->columnspritesheet_Id = __super::Columns[L"spritesheet_Id"];
        this->columnname = __super::Columns[L"name"];
        this->columnfile = __super::Columns[L"file"];
        this->columnset = __super::Columns[L"set"];
    }
    
    inline ::System::Void root::spritesheetDataTable::InitClass() {
        this->columnspritesheet_Id = (gcnew ::System::Data::DataColumn(L"spritesheet_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnspritesheet_Id);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfile);
        this->columnset = (gcnew ::System::Data::DataColumn(L"set", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnset);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnspritesheet_Id}, 
                true)));
        this->columnspritesheet_Id->AutoIncrement = true;
        this->columnspritesheet_Id->AllowDBNull = false;
        this->columnspritesheet_Id->Unique = true;
        this->columnname->Namespace = L"";
        this->columnfile->Namespace = L"";
        this->columnset->Namespace = L"";
    }
    
    inline TriggerAction::root::spritesheetRow^  root::spritesheetDataTable::NewspritesheetRow() {
        return (cli::safe_cast<TriggerAction::root::spritesheetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  root::spritesheetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew TriggerAction::root::spritesheetRow(builder));
    }
    
    inline ::System::Type^  root::spritesheetDataTable::GetRowType() {
        return TriggerAction::root::spritesheetRow::typeid;
    }
    
    inline ::System::Void root::spritesheetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->spritesheetRowChanged(this, (gcnew TriggerAction::root::spritesheetRowChangeEvent((cli::safe_cast<TriggerAction::root::spritesheetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spritesheetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->spritesheetRowChanging(this, (gcnew TriggerAction::root::spritesheetRowChangeEvent((cli::safe_cast<TriggerAction::root::spritesheetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spritesheetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->spritesheetRowDeleted(this, (gcnew TriggerAction::root::spritesheetRowChangeEvent((cli::safe_cast<TriggerAction::root::spritesheetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spritesheetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->spritesheetRowDeleting(this, (gcnew TriggerAction::root::spritesheetRowChangeEvent((cli::safe_cast<TriggerAction::root::spritesheetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::spritesheetDataTable::RemovespritesheetRow(TriggerAction::root::spritesheetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::spritesheetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"spritesheetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::animationDataTable::animationDataTable() {
        this->TableName = L"animation";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline root::animationDataTable::animationDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline root::animationDataTable::animationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  root::animationDataTable::animation_IdColumn::get() {
        return this->columnanimation_Id;
    }
    
    inline ::System::Data::DataColumn^  root::animationDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  root::animationDataTable::frameTimeColumn::get() {
        return this->columnframeTime;
    }
    
    inline ::System::Data::DataColumn^  root::animationDataTable::spritesheet_IdColumn::get() {
        return this->columnspritesheet_Id;
    }
    
    inline ::System::Int32 root::animationDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline TriggerAction::root::animationRow^  root::animationDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<TriggerAction::root::animationRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void root::animationDataTable::AddanimationRow(TriggerAction::root::animationRow^  row) {
        this->Rows->Add(row);
    }
    
    inline TriggerAction::root::animationRow^  root::animationDataTable::AddanimationRow(System::String^  name, System::String^  frameTime, 
                TriggerAction::root::spritesheetRow^  parentspritesheetRowByspritesheet_animation) {
        TriggerAction::root::animationRow^  rowanimationRow = (cli::safe_cast<TriggerAction::root::animationRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {nullptr, name, frameTime, 
            nullptr};
        if (parentspritesheetRowByspritesheet_animation != nullptr) {
            columnValuesArray[3] = parentspritesheetRowByspritesheet_animation[0];
        }
        rowanimationRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowanimationRow);
        return rowanimationRow;
    }
    
    inline ::System::Collections::IEnumerator^  root::animationDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  root::animationDataTable::Clone() {
        TriggerAction::root::animationDataTable^  cln = (cli::safe_cast<TriggerAction::root::animationDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  root::animationDataTable::CreateInstance() {
        return (gcnew TriggerAction::root::animationDataTable());
    }
    
    inline ::System::Void root::animationDataTable::InitVars() {
        this->columnanimation_Id = __super::Columns[L"animation_Id"];
        this->columnname = __super::Columns[L"name"];
        this->columnframeTime = __super::Columns[L"frameTime"];
        this->columnspritesheet_Id = __super::Columns[L"spritesheet_Id"];
    }
    
    inline ::System::Void root::animationDataTable::InitClass() {
        this->columnanimation_Id = (gcnew ::System::Data::DataColumn(L"animation_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnanimation_Id);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnframeTime = (gcnew ::System::Data::DataColumn(L"frameTime", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnframeTime);
        this->columnspritesheet_Id = (gcnew ::System::Data::DataColumn(L"spritesheet_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnspritesheet_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnanimation_Id}, 
                true)));
        this->columnanimation_Id->AutoIncrement = true;
        this->columnanimation_Id->AllowDBNull = false;
        this->columnanimation_Id->Unique = true;
        this->columnname->Namespace = L"";
        this->columnframeTime->Namespace = L"";
    }
    
    inline TriggerAction::root::animationRow^  root::animationDataTable::NewanimationRow() {
        return (cli::safe_cast<TriggerAction::root::animationRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  root::animationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew TriggerAction::root::animationRow(builder));
    }
    
    inline ::System::Type^  root::animationDataTable::GetRowType() {
        return TriggerAction::root::animationRow::typeid;
    }
    
    inline ::System::Void root::animationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->animationRowChanged(this, (gcnew TriggerAction::root::animationRowChangeEvent((cli::safe_cast<TriggerAction::root::animationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::animationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->animationRowChanging(this, (gcnew TriggerAction::root::animationRowChangeEvent((cli::safe_cast<TriggerAction::root::animationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::animationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->animationRowDeleted(this, (gcnew TriggerAction::root::animationRowChangeEvent((cli::safe_cast<TriggerAction::root::animationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::animationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->animationRowDeleting(this, (gcnew TriggerAction::root::animationRowChangeEvent((cli::safe_cast<TriggerAction::root::animationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void root::animationDataTable::RemoveanimationRow(TriggerAction::root::animationRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  root::animationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        TriggerAction::root^  ds = (gcnew TriggerAction::root());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"animationDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline root::spriteRow::spriteRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablesprite = (cli::safe_cast<TriggerAction::root::spriteDataTable^  >(this->Table));
    }
    
    inline System::String^  root::spriteRow::x::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'x\' in table \'sprite\' is DBNull.", e));
        }
    }
    inline System::Void root::spriteRow::x::set(System::String^  value) {
        this[this->tablesprite->xColumn] = value;
    }
    
    inline System::String^  root::spriteRow::y::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'y\' in table \'sprite\' is DBNull.", e));
        }
    }
    inline System::Void root::spriteRow::y::set(System::String^  value) {
        this[this->tablesprite->yColumn] = value;
    }
    
    inline System::String^  root::spriteRow::width::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->widthColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'width\' in table \'sprite\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spriteRow::width::set(System::String^  value) {
        this[this->tablesprite->widthColumn] = value;
    }
    
    inline System::String^  root::spriteRow::height::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->heightColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'height\' in table \'sprite\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spriteRow::height::set(System::String^  value) {
        this[this->tablesprite->heightColumn] = value;
    }
    
    inline System::String^  root::spriteRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'sprite\' is DBNull.", e));
        }
    }
    inline System::Void root::spriteRow::name::set(System::String^  value) {
        this[this->tablesprite->nameColumn] = value;
    }
    
    inline System::String^  root::spriteRow::frameTime::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablesprite->frameTimeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'frameTime\' in table \'sprite\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spriteRow::frameTime::set(System::String^  value) {
        this[this->tablesprite->frameTimeColumn] = value;
    }
    
    inline System::Int32 root::spriteRow::animation_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablesprite->animation_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'animation_Id\' in table \'sprite\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spriteRow::animation_Id::set(System::Int32 value) {
        this[this->tablesprite->animation_IdColumn] = value;
    }
    
    inline System::Int32 root::spriteRow::spritesheet_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablesprite->spritesheet_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spritesheet_Id\' in table \'sprite\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spriteRow::spritesheet_Id::set(System::Int32 value) {
        this[this->tablesprite->spritesheet_IdColumn] = value;
    }
    
    inline TriggerAction::root::animationRow^  root::spriteRow::animationRow::get() {
        return (cli::safe_cast<TriggerAction::root::animationRow^  >(this->GetParentRow(this->Table->ParentRelations[L"animation_sprite"])));
    }
    inline System::Void root::spriteRow::animationRow::set(TriggerAction::root::animationRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"animation_sprite"]);
    }
    
    inline TriggerAction::root::spritesheetRow^  root::spriteRow::spritesheetRow::get() {
        return (cli::safe_cast<TriggerAction::root::spritesheetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spritesheet_sprite"])));
    }
    inline System::Void root::spriteRow::spritesheetRow::set(TriggerAction::root::spritesheetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"spritesheet_sprite"]);
    }
    
    inline ::System::Boolean root::spriteRow::IsxNull() {
        return this->IsNull(this->tablesprite->xColumn);
    }
    
    inline ::System::Void root::spriteRow::SetxNull() {
        this[this->tablesprite->xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::IsyNull() {
        return this->IsNull(this->tablesprite->yColumn);
    }
    
    inline ::System::Void root::spriteRow::SetyNull() {
        this[this->tablesprite->yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::IswidthNull() {
        return this->IsNull(this->tablesprite->widthColumn);
    }
    
    inline ::System::Void root::spriteRow::SetwidthNull() {
        this[this->tablesprite->widthColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::IsheightNull() {
        return this->IsNull(this->tablesprite->heightColumn);
    }
    
    inline ::System::Void root::spriteRow::SetheightNull() {
        this[this->tablesprite->heightColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::IsnameNull() {
        return this->IsNull(this->tablesprite->nameColumn);
    }
    
    inline ::System::Void root::spriteRow::SetnameNull() {
        this[this->tablesprite->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::IsframeTimeNull() {
        return this->IsNull(this->tablesprite->frameTimeColumn);
    }
    
    inline ::System::Void root::spriteRow::SetframeTimeNull() {
        this[this->tablesprite->frameTimeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::Isanimation_IdNull() {
        return this->IsNull(this->tablesprite->animation_IdColumn);
    }
    
    inline ::System::Void root::spriteRow::Setanimation_IdNull() {
        this[this->tablesprite->animation_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spriteRow::Isspritesheet_IdNull() {
        return this->IsNull(this->tablesprite->spritesheet_IdColumn);
    }
    
    inline ::System::Void root::spriteRow::Setspritesheet_IdNull() {
        this[this->tablesprite->spritesheet_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline root::hitboxRow::hitboxRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablehitbox = (cli::safe_cast<TriggerAction::root::hitboxDataTable^  >(this->Table));
    }
    
    inline System::String^  root::hitboxRow::x::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablehitbox->xColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'x\' in table \'hitbox\' is DBNull.", e));
        }
    }
    inline System::Void root::hitboxRow::x::set(System::String^  value) {
        this[this->tablehitbox->xColumn] = value;
    }
    
    inline System::String^  root::hitboxRow::y::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablehitbox->yColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'y\' in table \'hitbox\' is DBNull.", e));
        }
    }
    inline System::Void root::hitboxRow::y::set(System::String^  value) {
        this[this->tablehitbox->yColumn] = value;
    }
    
    inline System::String^  root::hitboxRow::width::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablehitbox->widthColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'width\' in table \'hitbox\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::hitboxRow::width::set(System::String^  value) {
        this[this->tablehitbox->widthColumn] = value;
    }
    
    inline System::String^  root::hitboxRow::height::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablehitbox->heightColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'height\' in table \'hitbox\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::hitboxRow::height::set(System::String^  value) {
        this[this->tablehitbox->heightColumn] = value;
    }
    
    inline System::String^  root::hitboxRow::z::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablehitbox->zColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'z\' in table \'hitbox\' is DBNull.", e));
        }
    }
    inline System::Void root::hitboxRow::z::set(System::String^  value) {
        this[this->tablehitbox->zColumn] = value;
    }
    
    inline ::System::Boolean root::hitboxRow::IsxNull() {
        return this->IsNull(this->tablehitbox->xColumn);
    }
    
    inline ::System::Void root::hitboxRow::SetxNull() {
        this[this->tablehitbox->xColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::hitboxRow::IsyNull() {
        return this->IsNull(this->tablehitbox->yColumn);
    }
    
    inline ::System::Void root::hitboxRow::SetyNull() {
        this[this->tablehitbox->yColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::hitboxRow::IswidthNull() {
        return this->IsNull(this->tablehitbox->widthColumn);
    }
    
    inline ::System::Void root::hitboxRow::SetwidthNull() {
        this[this->tablehitbox->widthColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::hitboxRow::IsheightNull() {
        return this->IsNull(this->tablehitbox->heightColumn);
    }
    
    inline ::System::Void root::hitboxRow::SetheightNull() {
        this[this->tablehitbox->heightColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::hitboxRow::IszNull() {
        return this->IsNull(this->tablehitbox->zColumn);
    }
    
    inline ::System::Void root::hitboxRow::SetzNull() {
        this[this->tablehitbox->zColumn] = ::System::Convert::DBNull;
    }
    
    
    inline root::weaponMenuIconRow::weaponMenuIconRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableweaponMenuIcon = (cli::safe_cast<TriggerAction::root::weaponMenuIconDataTable^  >(this->Table));
    }
    
    inline System::String^  root::weaponMenuIconRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableweaponMenuIcon->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'weaponMenuIcon\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::weaponMenuIconRow::name::set(System::String^  value) {
        this[this->tableweaponMenuIcon->nameColumn] = value;
    }
    
    inline ::System::Boolean root::weaponMenuIconRow::IsnameNull() {
        return this->IsNull(this->tableweaponMenuIcon->nameColumn);
    }
    
    inline ::System::Void root::weaponMenuIconRow::SetnameNull() {
        this[this->tableweaponMenuIcon->nameColumn] = ::System::Convert::DBNull;
    }
    
    
    inline root::spritesheetRow::spritesheetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablespritesheet = (cli::safe_cast<TriggerAction::root::spritesheetDataTable^  >(this->Table));
    }
    
    inline System::Int32 root::spritesheetRow::spritesheet_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablespritesheet->spritesheet_IdColumn]));
    }
    inline System::Void root::spritesheetRow::spritesheet_Id::set(System::Int32 value) {
        this[this->tablespritesheet->spritesheet_IdColumn] = value;
    }
    
    inline System::String^  root::spritesheetRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablespritesheet->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'spritesheet\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spritesheetRow::name::set(System::String^  value) {
        this[this->tablespritesheet->nameColumn] = value;
    }
    
    inline System::String^  root::spritesheetRow::file::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablespritesheet->fileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'file\' in table \'spritesheet\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spritesheetRow::file::set(System::String^  value) {
        this[this->tablespritesheet->fileColumn] = value;
    }
    
    inline System::String^  root::spritesheetRow::set::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablespritesheet->setColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'set\' in table \'spritesheet\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::spritesheetRow::set::set(System::String^  value) {
        this[this->tablespritesheet->setColumn] = value;
    }
    
    inline ::System::Boolean root::spritesheetRow::IsnameNull() {
        return this->IsNull(this->tablespritesheet->nameColumn);
    }
    
    inline ::System::Void root::spritesheetRow::SetnameNull() {
        this[this->tablespritesheet->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spritesheetRow::IsfileNull() {
        return this->IsNull(this->tablespritesheet->fileColumn);
    }
    
    inline ::System::Void root::spritesheetRow::SetfileNull() {
        this[this->tablespritesheet->fileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::spritesheetRow::IssetNull() {
        return this->IsNull(this->tablespritesheet->setColumn);
    }
    
    inline ::System::Void root::spritesheetRow::SetsetNull() {
        this[this->tablespritesheet->setColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< TriggerAction::root::spriteRow^  >^  root::spritesheetRow::GetspriteRows() {
        if (this->Table->ChildRelations[L"spritesheet_sprite"] == nullptr) {
            return gcnew cli::array< TriggerAction::root::spriteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< TriggerAction::root::spriteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spritesheet_sprite"])));
        }
    }
    
    inline cli::array< TriggerAction::root::animationRow^  >^  root::spritesheetRow::GetanimationRows() {
        if (this->Table->ChildRelations[L"spritesheet_animation"] == nullptr) {
            return gcnew cli::array< TriggerAction::root::animationRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< TriggerAction::root::animationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"spritesheet_animation"])));
        }
    }
    
    
    inline root::animationRow::animationRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableanimation = (cli::safe_cast<TriggerAction::root::animationDataTable^  >(this->Table));
    }
    
    inline System::Int32 root::animationRow::animation_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableanimation->animation_IdColumn]));
    }
    inline System::Void root::animationRow::animation_Id::set(System::Int32 value) {
        this[this->tableanimation->animation_IdColumn] = value;
    }
    
    inline System::String^  root::animationRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableanimation->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'animation\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::animationRow::name::set(System::String^  value) {
        this[this->tableanimation->nameColumn] = value;
    }
    
    inline System::String^  root::animationRow::frameTime::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableanimation->frameTimeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'frameTime\' in table \'animation\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::animationRow::frameTime::set(System::String^  value) {
        this[this->tableanimation->frameTimeColumn] = value;
    }
    
    inline System::Int32 root::animationRow::spritesheet_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableanimation->spritesheet_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'spritesheet_Id\' in table \'animation\' is DBNull.", 
                e));
        }
    }
    inline System::Void root::animationRow::spritesheet_Id::set(System::Int32 value) {
        this[this->tableanimation->spritesheet_IdColumn] = value;
    }
    
    inline TriggerAction::root::spritesheetRow^  root::animationRow::spritesheetRow::get() {
        return (cli::safe_cast<TriggerAction::root::spritesheetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"spritesheet_animation"])));
    }
    inline System::Void root::animationRow::spritesheetRow::set(TriggerAction::root::spritesheetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"spritesheet_animation"]);
    }
    
    inline ::System::Boolean root::animationRow::IsnameNull() {
        return this->IsNull(this->tableanimation->nameColumn);
    }
    
    inline ::System::Void root::animationRow::SetnameNull() {
        this[this->tableanimation->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::animationRow::IsframeTimeNull() {
        return this->IsNull(this->tableanimation->frameTimeColumn);
    }
    
    inline ::System::Void root::animationRow::SetframeTimeNull() {
        this[this->tableanimation->frameTimeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean root::animationRow::Isspritesheet_IdNull() {
        return this->IsNull(this->tableanimation->spritesheet_IdColumn);
    }
    
    inline ::System::Void root::animationRow::Setspritesheet_IdNull() {
        this[this->tableanimation->spritesheet_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< TriggerAction::root::spriteRow^  >^  root::animationRow::GetspriteRows() {
        if (this->Table->ChildRelations[L"animation_sprite"] == nullptr) {
            return gcnew cli::array< TriggerAction::root::spriteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< TriggerAction::root::spriteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"animation_sprite"])));
        }
    }
    
    
    inline root::spriteRowChangeEvent::spriteRowChangeEvent(TriggerAction::root::spriteRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline TriggerAction::root::spriteRow^  root::spriteRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction root::spriteRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline root::hitboxRowChangeEvent::hitboxRowChangeEvent(TriggerAction::root::hitboxRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline TriggerAction::root::hitboxRow^  root::hitboxRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction root::hitboxRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline root::weaponMenuIconRowChangeEvent::weaponMenuIconRowChangeEvent(TriggerAction::root::weaponMenuIconRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline TriggerAction::root::weaponMenuIconRow^  root::weaponMenuIconRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction root::weaponMenuIconRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline root::spritesheetRowChangeEvent::spritesheetRowChangeEvent(TriggerAction::root::spritesheetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline TriggerAction::root::spritesheetRow^  root::spritesheetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction root::spritesheetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline root::animationRowChangeEvent::animationRowChangeEvent(TriggerAction::root::animationRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline TriggerAction::root::animationRow^  root::animationRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction root::animationRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
